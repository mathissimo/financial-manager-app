/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BudgetEditor.java
 *
 * Created on Jan 4, 2013, 12:03:22 PM
 */
package dsh;

import java.math.BigDecimal;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author maak
 */
public class BudgetEditor extends javax.swing.JFrame {
        private DefaultTableModel myBudgetTable;
        private DefaultTableModel myBTtable;
        private int colContainingID=0;
        private Model myModel;
        private Budget myBudget;

    /** Creates new form BudgetEditor */
    public BudgetEditor() {
        initComponents();
        pickerStartDate.setFormats(new String[] {"dd.MM.yyyy"});
        pickerEndDate.setFormats(new String[] {"dd.MM.yyyy"});
        initBudgetEditor ();
    }
    
    public void initBudgetEditor (){
        myModel=DshApp.getModel();
        myBudget = new Budget ();
        refreshBudgetTable();
        refreshBTtable();
        loadBudgetintoEditor();
    }
    
    public void refreshBudgetTable () {
        myBudgetTable=myModel.getAllBudgetsEver();
        if (myBudgetTable!=null) {
            tableExistingBudgets.setModel(myBudgetTable);
            tableExistingBudgets.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            TableModelHelper.packColumns(tableExistingBudgets);
        } else {
            JOptionPane.showMessageDialog(this, "Tabelle Ausgabe-Typ konnte NICHT geladen werden!");
        }
    }

    public void refreshBTtable () {
        myBTtable=myModel.getTableBudgetTyp();
        if (myBTtable!=null) {
            tableExistingBudgetTypen.setModel(myBTtable);
            tableExistingBudgetTypen.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            TableModelHelper.packColumns(tableExistingBudgetTypen);
        } else {
            JOptionPane.showMessageDialog(this, "Tabelle Budget-Typen konnte NICHT geladen werden!");
        }
    }
    
    private void loadBudgetintoEditor (){
        if (myBudget.getId()==-1 || myBudget.isBudgetSuccesfullyLoaded()) {
            textFieldBetrag.setText(myBudget.getBetrag().toPlainString());
            pickerStartDate.setDate(myBudget.getStartDate());
            pickerEndDate.setDate(myBudget.getEndDate());
            TableModelHelper.selectRowByIDvalue(tableExistingBudgetTypen, myBudget.getBudgetTyp());
            if (myBudget.getId()==-1) tableExistingBudgetTypen.clearSelection();
        } else {
            JOptionPane.showMessageDialog(this, "Ausgabe-Typ konnte NICHT geladen werden!");
        }       
    }
    
    private boolean succesfullySavedDataToDB () {
        String fieldsErrorCode = errorOnFillingEntriesIntoBudget(); // Einträge valide?
        if (fieldsErrorCode.equals("")) { 
            myBudget.setStartDate(Model.utilDateToSqlDate(pickerStartDate.getDate()));
            myBudget.setEndDate(Model.utilDateToSqlDate(pickerEndDate.getDate()));
            myBudget.setBudgetTyp ((java.lang.Integer)(tableExistingBudgetTypen.getValueAt(tableExistingBudgetTypen.getSelectedRow(),0)));
            myBudget.setBetrag (new BigDecimal (textFieldBetrag.getText().replace(",", ".")));
            return myBudget.successfullySavedToDB(); // Budget Objekt kümmert sich ums speichern
        } else {
           JOptionPane.showMessageDialog(this, fieldsErrorCode+": Bitte überprüfen Sie Ihre Eingabe.");
           System.out.println ("** Eingabefehler: "+fieldsErrorCode);
        }
        return false;
    } 
    
    
    private String errorOnFillingEntriesIntoBudget () {
        String entriesValidationError = "";
        if (tableExistingBudgetTypen.getSelectedRow()==-1) entriesValidationError =  "Kein Budget-Typ gewählt";
        if (!myModel.stringHasMoneyValue(textFieldBetrag.getText())) entriesValidationError = "Betrag nicht lesbar";
        try {
            Model.utilDateToSqlDate(pickerStartDate.getDate());
        } catch (Exception e) {
            System.out.println ("BudgetEditor:errorOnFillingEntriesIntoBudget: Checking Datum: ");
            e.printStackTrace();
            entriesValidationError = "Start-Datum nicht lesbar";
        }
        try {
            Model.utilDateToSqlDate(pickerEndDate.getDate());
        } catch (Exception e) {
            System.out.println ("BudgetEditor:errorOnFillingEntriesIntoBudget: Checking Datum: ");
            e.printStackTrace();
            entriesValidationError = "Ende-Datum nicht lesbar";
        }
        return entriesValidationError;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableExistingBudgets = new javax.swing.JTable();
        buttonEdit = new javax.swing.JButton();
        buttonLoeschen = new javax.swing.JButton();
        textFieldBetrag = new javax.swing.JTextField();
        buttonSpeichern = new javax.swing.JButton();
        buttonSchliessen = new javax.swing.JButton();
        buttonNeu = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        pickerStartDate = new org.jdesktop.swingx.JXDatePicker();
        jLabel9 = new javax.swing.JLabel();
        pickerEndDate = new org.jdesktop.swingx.JXDatePicker();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableExistingBudgetTypen = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        buttonBudgetTypen = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Form"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(dsh.DshApp.class).getContext().getResourceMap(BudgetEditor.class);
        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        tableExistingBudgets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableExistingBudgets.setName("tableExistingBudgets"); // NOI18N
        jScrollPane2.setViewportView(tableExistingBudgets);

        buttonEdit.setText(resourceMap.getString("buttonEdit.text")); // NOI18N
        buttonEdit.setName("buttonEdit"); // NOI18N
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });

        buttonLoeschen.setText(resourceMap.getString("buttonLoeschen.text")); // NOI18N
        buttonLoeschen.setName("buttonLoeschen"); // NOI18N
        buttonLoeschen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoeschenActionPerformed(evt);
            }
        });

        textFieldBetrag.setText(resourceMap.getString("textFieldBetrag.text")); // NOI18N
        textFieldBetrag.setName("textFieldBetrag"); // NOI18N

        buttonSpeichern.setText(resourceMap.getString("buttonSpeichern.text")); // NOI18N
        buttonSpeichern.setName("buttonSpeichern"); // NOI18N
        buttonSpeichern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSpeichernActionPerformed(evt);
            }
        });

        buttonSchliessen.setText(resourceMap.getString("buttonSchliessen.text")); // NOI18N
        buttonSchliessen.setName("buttonSchliessen"); // NOI18N
        buttonSchliessen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSchliessenActionPerformed(evt);
            }
        });

        buttonNeu.setText(resourceMap.getString("buttonNeu.text")); // NOI18N
        buttonNeu.setName("buttonNeu"); // NOI18N
        buttonNeu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNeuActionPerformed(evt);
            }
        });

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        pickerStartDate.setName("pickerStartDate"); // NOI18N

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        pickerEndDate.setName("pickerEndDate"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        tableExistingBudgetTypen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableExistingBudgetTypen.setName("tableExistingBudgetTypen"); // NOI18N
        jScrollPane3.setViewportView(tableExistingBudgetTypen);

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        buttonBudgetTypen.setText(resourceMap.getString("buttonBudgetTypen.text")); // NOI18N
        buttonBudgetTypen.setName("buttonBudgetTypen"); // NOI18N
        buttonBudgetTypen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBudgetTypenActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(buttonEdit)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(buttonLoeschen)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 153, Short.MAX_VALUE)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(buttonSchliessen, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(buttonNeu)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, buttonSpeichern, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                .add(jLabel8)
                                                .add(pickerStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 210, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED))
                                        .add(jPanel1Layout.createSequentialGroup()
                                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                                .add(buttonBudgetTypen, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE))
                                            .add(27, 27, 27)))
                                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                        .add(jLabel9)
                                        .add(pickerEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 210, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(jLabel2)
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .add(2, 2, 2)
                                            .add(jLabel4)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                            .add(textFieldBetrag)
                                            .add(18, 18, 18)))))
                            .add(jLabel3))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(buttonSchliessen))
                .add(18, 18, 18)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(buttonEdit)
                    .add(buttonLoeschen)
                    .add(buttonNeu))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(textFieldBetrag, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel4)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(buttonBudgetTypen)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel8)
                        .add(4, 4, 4)
                        .add(pickerStartDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel9)
                        .add(4, 4, 4)
                        .add(pickerEndDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(18, 18, 18)
                .add(buttonSpeichern)
                .add(49, 49, 49))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 493, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        if (DshApp.getApplication().isTheTopWindow(this)) {
            if (tableExistingBudgets.getSelectedRow()!=-1) {
                if (myBudget.getId()>0) myBudget.disposeMe();
                myBudget = new Budget (
                         ((java.lang.Integer) tableExistingBudgets.getValueAt(
                                tableExistingBudgets.getSelectedRow(),
                                colContainingID)
                         ).intValue()
                        );
            }
            loadBudgetintoEditor();            
        }
    }//GEN-LAST:event_buttonEditActionPerformed

    private void buttonSchliessenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSchliessenActionPerformed
        if (DshApp.getApplication().isTheTopWindow(this)) {
            if (myBudget.getId()>0) myBudget.disposeMe();
            DshApp.getApplication().endBudgetEditor();
        }
    }//GEN-LAST:event_buttonSchliessenActionPerformed

    private void buttonLoeschenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoeschenActionPerformed
        if (DshApp.getApplication().isTheTopWindow(this) && DshApp.getApplication().userAccordOnDeleteWarning(this)) {
            if (tableExistingBudgets.getSelectedRow()!=-1) {
                int selectedForDelete =((java.lang.Integer)
                        tableExistingBudgets.getValueAt(
                            tableExistingBudgets.getSelectedRow(),
                            colContainingID)
                        ).intValue();
                if (selectedForDelete==myBudget.getId()) {
                    // if to-be-deleted Budget is the loaded one..
                    myBudget.deleteBudget();
                    initBudgetEditor();
                } else {
                    Budget.deleteBudget(selectedForDelete);
                    refreshBudgetTable ();
                }

            }            
        }
    }//GEN-LAST:event_buttonLoeschenActionPerformed

    private void buttonNeuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNeuActionPerformed
        if (DshApp.getApplication().isTheTopWindow(this)) {
            if (myBudget.getId()>0) myBudget.disposeMe();
            myBudget = new Budget ();
            loadBudgetintoEditor ();            
        }        
    }//GEN-LAST:event_buttonNeuActionPerformed

    private void buttonSpeichernActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSpeichernActionPerformed
        if (DshApp.getApplication().isTheTopWindow(this)) {
            String fieldsErrorCode=errorOnFillingEntriesIntoBudget();
            if (fieldsErrorCode.equals("")) {
                if (!succesfullySavedDataToDB()) JOptionPane.showMessageDialog(this, "Ausgabe-Typ konnte NICHT gespeichert werden!");
                System.out.println("nach Save:");
                myBudget.printBudgettoLog();
                refreshBudgetTable ();
            } else{
               JOptionPane.showMessageDialog(this, fieldsErrorCode+": Bitte überprüfen Sie Ihre Eingabe.");
               System.out.println ("** Eingabefehler: "+fieldsErrorCode);        }            
        }
    }//GEN-LAST:event_buttonSpeichernActionPerformed

    private void buttonBudgetTypenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBudgetTypenActionPerformed
        if (DshApp.getApplication().isTheTopWindow(this)) {
            DshApp.getApplication().startBudgetTypEditor();            
        }
    }//GEN-LAST:event_buttonBudgetTypenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BudgetEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BudgetEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BudgetEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BudgetEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new BudgetEditor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBudgetTypen;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonLoeschen;
    private javax.swing.JButton buttonNeu;
    private javax.swing.JButton buttonSchliessen;
    private javax.swing.JButton buttonSpeichern;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private org.jdesktop.swingx.JXDatePicker pickerEndDate;
    private org.jdesktop.swingx.JXDatePicker pickerStartDate;
    private javax.swing.JTable tableExistingBudgetTypen;
    private javax.swing.JTable tableExistingBudgets;
    private javax.swing.JTextField textFieldBetrag;
    // End of variables declaration//GEN-END:variables
}
